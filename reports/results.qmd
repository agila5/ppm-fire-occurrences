---
title: "Non-separable spatio-temporal Poisson point process models for fire occurrences - Companion code"
author: "Nicoletta D'Angelo, Alessandro Albano, Andrea Gilardi, Giada Adelfio"
format: 
  html: 
    page-layout: full
    knitr: 
      opts_chunk: 
        collapse: true
        crop: true
        dpi: 50
    toc: true
    embed-resources: false
date: today
---

```{r setup-and-packages}
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)

library(targets)
tar_config_set(store = here::here("_targets"))
tar_source(here::here("R/functions.R"))
invisible(suppressPackageStartupMessages(
  sapply(tar_read(packages_names), library, character.only = TRUE)
))
library(here)

options(width = 100)
```

```{r}
#| include: false
# The following function is used to create the space-time representation
# of the environmental variables. See below. 
tf = function(x, y, w = .75, h = .33) {
  x2 = x * w + y * (1 - w)
  y2 = y * h
  x2[length(x2) + 1] = x2[1]
  y2[length(y2) + 1] = y2[1]
  list(x = x2, y = y2)
}
```

This document replicates the analyses included in the paper entitled *Non-separable spatio-temporal Poisson point process models for fire occurrences*. Please notice that the `R` code used to create each object loaded by `tar_load(...)` can be browsed from the `_targets.R` file in this directory. We refer to the `README` file of this directory for more details regarding the `targets` approach. Furthermore, check the underlying `.qmd` file for more details on how we generated this document. 

## Premilinary steps

I need to load several bounding boxes that will be used to create some plots. 

```{r}
tar_load(pantelleria_bbox)
tar_load(linosa_bbox)
tar_load(lampedusa_bbox)
tar_load(palermo_bbox)
tar_load(sicily_mainland_bbox)
```

Define also several vectors that will be used to place inset maps into figures. 

```{r}
xrange_pantelleria <- st_bbox(pantelleria_bbox)[c(1, 3)]
xrange_lampedusa <- st_bbox(lampedusa_bbox)[c(1, 3)]
xrange_linosa <- st_bbox(linosa_bbox)[c(1, 3)]

yrange_pantelleria <- st_bbox(pantelleria_bbox)[c(2, 4)]
yrange_lampedusa <- st_bbox(lampedusa_bbox)[c(2, 4)]
yrange_linosa <- st_bbox(linosa_bbox)[c(2, 4)]
```

## Section 2

### Figure 1

Load relevant data, compute the number of points in each region, and plot it.  

```{r}
tar_load(fires_italy)
tar_load(confini_regioni)
confini_regioni[["counts"]] <- st_intersects(confini_regioni, fires_italy) |> lengths()
```

```{r}
#| echo: false
#| fig-width: 7.5
#| fig-height: 9
#| out-width: 70%
#| fig-align: center
if (!interactive()) {
  ggplot(data = confini_regioni) + 
  geom_sf(aes(fill = counts)) + 
  scale_fill_continuous_c4a_seq("brewer.oranges")+
  theme_minimal() + 
  theme(
    legend.title = element_text(size = 14), 
    legend.text = element_text(size = 10), 
    legend.key.height = unit(2, "lines")
  ) + 
  labs(fill = "Fire counts")
}
```

```{r}
#| include: false
rm(confini_regioni)
```

### Figure 2

```{r}
tar_load(fires_sicily_ppp)
tar_load(fires_sicily_sf)
```

There are `{r} npoints(fires_sicily_ppp)` events that occurred during 2023 in the region. We can check their monthly temporal distribution and compare with the whole country (Figure 2) as follows: 

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 7
#| out-width: 70%
#| fig-align: center
if (!interactive()) {
  bind_rows(
  Italy = fires_italy |> st_drop_geometry(), 
  Sicily = fires_sicily_sf |> st_drop_geometry(), 
  .id = "ID"
) |> 
  group_by(ID, month = month(ACQ_DATETIME, label = TRUE)) |> 
  count() |> 
  ggplot(aes(x = month, y = n, fill = ID)) + 
  geom_col(position = position_dodge(), alpha = 0.75) + 
  geom_text(aes(label = n), fontface = "bold", vjust = 1.5, position = position_dodge(.9), size = 2) + 
  scale_fill_manual(values = c("orange", "brown")) + 
  labs(x = "\n Month", y = "Fire Counts\n", fill = "") + 
  theme_minimal() + 
  theme(
    axis.title = element_text(face = "bold", size = 12)
  )
}
```

```{r}
#| include: false
rm(fires_italy)
```

### Figure 3

The following map shows spatial distribution of such events (Figure 3): 

```{r}
#| include: false
tar_load(land_use_tidy_union)
```

```{r}
#| include: false
if (!interactive()) {
  idx_eventi_pantelleria <- st_contains(pantelleria_bbox, fires_sicily_sf) |> unlist()
  idx_eventi_linosa <- st_contains(linosa_bbox, fires_sicily_sf) |> unlist()
  idx_eventi_lampedusa <- st_contains(lampedusa_bbox, fires_sicily_sf) |> unlist()
  
  idx_shape_pantelleria <- st_intersects(pantelleria_bbox, land_use_tidy_union) |> unlist()
shape_pantelleria <- land_use_tidy_union[idx_shape_pantelleria]

idx_shape_linosa <- st_intersects(linosa_bbox, land_use_tidy_union) |> unlist()
shape_linosa <- land_use_tidy_union[idx_shape_linosa]

idx_shape_lampedusa <- st_intersects(lampedusa_bbox, land_use_tidy_union) |> unlist()
shape_lampedusa <- land_use_tidy_union[idx_shape_lampedusa]

shape_everything_else <- land_use_tidy_union[-c(idx_shape_lampedusa, idx_shape_linosa, idx_shape_pantelleria)]
}
```

```{r}
#| include: false
if (!interactive()) {
  # Main plot
main_plot <- ggplot() +
  geom_sf(
    data = land_use_tidy_union[-c(
      idx_shape_lampedusa, idx_shape_linosa, idx_shape_pantelleria
    )] 
  ) +
  geom_sf(
    data = fires_sicily_sf[-c(
      idx_eventi_pantelleria, idx_eventi_linosa, idx_eventi_lampedusa
    ), ]
  ) + 
  theme_light() + 
  theme(panel.background = element_rect(fill = "white"), axis.text = element_text(size = 13.5))
}
```

```{r}
#| include: false
if (!interactive()) {
  inset_region <- ggplot() + 
  geom_sf(data = land_use_tidy_union) + 
  geom_sf(data = lampedusa_bbox |> st_boundary()) + 
  geom_sf(data = linosa_bbox |> st_boundary()) + 
  geom_sf(data = pantelleria_bbox |> st_boundary()) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 3), 
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  inset_pantelleria <- ggplot() + 
  geom_sf(data = land_use_tidy_union[idx_shape_pantelleria]) + 
  geom_sf(data = fires_sicily_sf[idx_eventi_pantelleria, ]) + 
  coord_sf(xlim = c(1760070, 1773730), ylim = c(4068772, 4082023)) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 3), 
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  inset_linosa <- ggplot() + 
  geom_sf(data = land_use_tidy_union[idx_shape_linosa]) + 
  geom_sf(data = fires_sicily_sf[idx_eventi_linosa, ]) + 
  coord_sf(xlim = c(1846520, 1851748), ylim = c(3973711, 3978066)) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 3), 
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  inset_lampedusa <- ggplot() + 
  geom_sf(data = land_use_tidy_union[idx_shape_lampedusa]) + 
  geom_sf(data = fires_sicily_sf[idx_eventi_lampedusa, ]) + 
  coord_sf(xlim = c(1818045, 1830515), ylim = c(3932694, 3938490)) +
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 3), 
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 10
#| out-width: 70%
#| fig-align: center
if (!interactive()) {
  ggplot() + 
  coord_equal(xlim = c(0, 24), ylim = c(0, 19), expand = FALSE) + 
  annotation_custom(
    ggplotGrob(main_plot), xmin = 0, xmax = 24, ymin = 0, ymax = 19
  ) + 
  annotation_custom(
    ggplotGrob(inset_region), xmin = 1.5, xmax = 7, ymin = 12.5, ymax = 18
  ) +
  annotation_custom(
    ggplotGrob(inset_pantelleria), xmin = 2, xmax = 5, ymin = 2, ymax = 5
  ) + 
  annotation_custom(
    ggplotGrob(inset_lampedusa), 
    xmin = 5.75, 
    xmax = 5.75 + 3 * diff(xrange_lampedusa) / diff(xrange_pantelleria), 
    ymin = 2.6, 
    ymax = 2.6 + 5 * diff(yrange_lampedusa) / diff(yrange_pantelleria)
  ) + 
  annotation_custom(
    ggplotGrob(inset_linosa), 
    xmin = 9.1, 
    xmax = 9.1 + 3 * diff(xrange_linosa) / diff(xrange_pantelleria), 
    ymin = 3, 
    ymax = 3 + 5 * diff(yrange_linosa) / diff(yrange_pantelleria)
  ) +
  annotate(
    "segment", 
    x = 3.5, y = 5.1,
    xend = 2.825, yend = 10.2, 
    lineend = "round", 
    linewidth = 1
  ) +
  annotate(
    "segment", 
    x = 2.7, y = 11,
    xend = 2.25, yend = 14.3, 
    arrow = arrow(), 
    lineend = "round", 
    linewidth = 1
  ) +
  annotate(
    "segment", 
    x = 7.1, y = 4.3,
    xend = 4.355, yend = 10, 
    lineend = "round", 
    linewidth = 1
  ) +
  annotate(
    "segment", 
    x = 4.05, y = 10.7,
    xend = 3.1, yend = 12.65, 
    arrow = arrow(), 
    lineend = "round", 
    linewidth = 1, 
  ) +
  annotate(
    "segment", 
    x = 9.5, y = 4,
    xend = 7, yend = 7.75, 
    lineend = "round", 
    linewidth = 1, 
  ) +
  annotate(
    "segment", 
    x = 4.85, y = 11,
    xend = 3.4, yend = 13.2, 
    arrow = arrow(), 
    lineend = "round", 
    linewidth = 1, 
  ) +
  labs(x = "", y = "") + 
  theme(panel.background = element_rect(fill = "white"), axis.text = element_blank(), axis.ticks = element_blank())
}
```

```{r}
#| include: false
if (!interactive()) {
  rm(inset_lampedusa, inset_linosa, inset_pantelleria, inset_region, idx_eventi_lampedusa, idx_eventi_linosa, idx_eventi_pantelleria, idx_shape_lampedusa, idx_shape_linosa, idx_shape_pantelleria, main_plot)
}
```

### Figure 4

Spatio-temporal monthly distribution of the events occured in the mainland

```{r}
#| include: false
tar_load(mainland)
```

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 8
#| out-width: 70%
#| fig-align: center
if (!interactive()) {
  fires_sicily_sf |> 
    st_filter(mainland) |> 
    mutate(month = month(ACQ_DATETIME, label = TRUE, abbr = FALSE)) |> 
    ggplot() + 
    geom_sf(data = mainland) +
    geom_sf() + 
    facet_wrap(~month) + 
    theme_light() + 
    scale_x_continuous(breaks = c(12.5, 13.5, 14.5, 15.5)) +
    theme(
      strip.text = element_text(face = "bold", colour = "black")
    )
}
```

### Figure 5

Load relevant data and define a series of indices that will be used to create inset maps. 

```{r}
tar_load(land_use_tidy)
tar_load(land_use_tidy_union)
idx_pantelleria <- st_intersects(pantelleria_bbox, land_use_tidy) |> unlist()
idx_linosa <- st_intersects(linosa_bbox, land_use_tidy) |> unlist()
idx_lampedusa <- st_intersects(lampedusa_bbox, land_use_tidy) |> unlist()
land_use_palermo <- st_intersection(land_use_tidy, palermo_bbox)
```

Plot

```{r}
#| echo: false
if (!interactive()) {
  mainland_plot <- ggplot() +
  geom_sf(
    data = land_use_tidy[-c(
      idx_lampedusa, idx_linosa, idx_pantelleria
    ), ],
    aes(fill = Code_18)
  ) +
  geom_sf(
    data = st_boundary(palermo_bbox), 
    linewidth = 1
  ) + 
  theme_light() + 
  scale_fill_manual(
    values = c(
      "Artificial surfaces" = "#a50000", 
      "Agricultural areas" = "#e49703", 
      "Forests" = "#287201", 
      "Water bodies" = "#bdeafe"
    )
  ) + 
  theme(
    axis.text = element_text(size = 13.5), 
    legend.text = element_text(size = 15), 
    plot.title = element_text(face = "bold", size = 18, hjust = 0.5)
  ) + 
  labs(fill = "", title = "Land usage")
}
```

```{r}
#| echo: false
if (!interactive()) {
  palermo_zoom <- ggplot() + 
  geom_sf(
    data = land_use_palermo, 
    aes(fill = Code_18), 
    show.legend = FALSE
  ) + 
  geom_sf(
    data = st_boundary(palermo_bbox), 
    linewidth = 1.5
  ) + 
  theme_light() + 
  coord_sf(datum = st_crs(3003)) + 
  scale_fill_manual(
    values = c(
      "Artificial surfaces" = "#a50000", 
      "Agricultural areas" = "#e49703", 
      "Forests" = "#287201", 
      "Water bodies" = "#bdeafe"
    )
  ) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", colour = NA), 
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| echo: false
if (!interactive()) {
  pantelleria_zoom <- ggplot() +
  geom_sf(
    data = land_use_tidy[idx_pantelleria, ] |> st_transform(4326),
    aes(fill = Code_18), 
    show.legend = FALSE
  ) +
  geom_sf(
    data = st_boundary(land_use_tidy_union[pantelleria_bbox, ]), 
    linewidth = 1
  ) + 
  theme_light() + 
  scale_fill_manual(
    values = c(
      "Artificial surfaces" = "#a50000", 
      "Agricultural areas" = "#e49703", 
      "Forests" = "#287201", 
      "Water bodies" = "#bdeafe"
    )
  ) + 
  theme(
    panel.border = element_rect(fill = NA, linewidth = 2, colour = "black"),
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| echo: false
if (!interactive()) {
  lampedusa_zoom <- ggplot() +
  geom_sf(
    data = land_use_tidy[idx_lampedusa, ] |> st_transform(4326),
    aes(fill = Code_18), 
    show.legend = FALSE
  ) +
  geom_sf(
    data = st_boundary(land_use_tidy_union[lampedusa_bbox, ]), 
    linewidth = 1
  ) + 
  theme_light() + 
  scale_fill_manual(
    values = c(
      "Artificial surfaces" = "#a50000", 
      "Agricultural areas" = "#e49703", 
      "Forests" = "#287201", 
      "Water bodies" = "#bdeafe"
    )
  ) + 
  theme(
    panel.border = element_rect(fill = NA, linewidth = 2, colour = "black"),
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| echo: false
if (!interactive()) {
  linosa_zoom <- ggplot() +
  geom_sf(
    data = land_use_tidy[idx_linosa, ] |> st_transform(4326),
    aes(fill = Code_18), 
    show.legend = FALSE
  ) +
  geom_sf(
    data = st_boundary(land_use_tidy_union[linosa_bbox, ]), 
    linewidth = 1
  ) + 
  theme_light() + 
  scale_fill_manual(
    values = c(
      "Artificial surfaces" = "#a50000", 
      "Agricultural areas" = "#e49703", 
      "Forests" = "#287201", 
      "Water bodies" = "#bdeafe"
    )
  ) + 
  theme(
    panel.border = element_rect(fill = NA, linewidth = 1, colour = "black"),
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 10
#| fig-align: center
#| out-width: 70%
if (!interactive()) {
  ggplot() + 
  coord_equal(xlim = c(0, 24), ylim = c(0, 20), expand = FALSE) + 
  annotation_custom(
    ggplotGrob(mainland_plot), xmin = 0, xmax = 24, ymin = 0, ymax = 20
  ) + 
  annotation_custom(
    ggplotGrob(palermo_zoom), xmin = 1.8, xmax = 6, ymin = 12.15, ymax = 16.65
  ) + 
  annotation_custom(
    ggplotGrob(pantelleria_zoom), xmin = 2, xmax = 5, ymin = 4, ymax = 7
  ) + 
  annotation_custom(
    ggplotGrob(lampedusa_zoom), 
    xmin = 5.25, xmax = 5.25 + 3 * diff(xrange_lampedusa) / diff(xrange_pantelleria), 
    ymin = 4.6, ymax = 4.6 + 5 * diff(yrange_lampedusa) / diff(yrange_pantelleria)
  ) + 
  annotation_custom(
    ggplotGrob(linosa_zoom), 
    xmin = 8.15, xmax = 8.15 + 3 * diff(xrange_linosa) / diff(xrange_pantelleria), 
    ymin = 5, ymax = 5 + 5 * diff(yrange_linosa) / diff(yrange_pantelleria)
  ) + 
  annotate(
    "segment", 
    x = 6, y = 14.75,
    xend = 8, yend = 12.75, 
    arrow = arrow(), 
    lineend = "round", 
    linewidth = 1, 
  ) + 
  theme(
    panel.background = element_rect(fill = "white"), 
    axis.text = element_blank(), 
    axis.ticks = element_blank()
  ) + 
  labs(x = "", y = "")
}
```

```{r}
#| include: false
rm(land_use_palermo, idx_lampedusa, idx_linosa, idx_pantelleria)
if (!interactive()) {
  rm(lampedusa_zoom, linosa_zoom, mainland_plot, palermo_zoom, pantelleria_zoom)
}
```

### Figure 6

Graphical representation of the moving grid for Horn's Algorithm

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 8
#| out-width: 70%
#| fig-align: center
if (!interactive()) {
  horn_grid <- st_make_grid(
    cellsize = c(1, 1), offset = c(0, 0), n = c(3, 3)
  )
  ggplot() + 
    geom_sf(
      data = horn_grid[5], 
      fill = grey(0.85)
    ) + 
    geom_sf(data = st_boundary(horn_grid), linewidth = 1) + 
    geom_sf_text(
    data = st_centroid(horn_grid),
    label = c( # NB: The grid is specified in reverse order
      "Alt[3]", "Alt[4]", "Alt[5]", 
      "Alt[2]", "", "Alt[6]",
      "Alt[1]", "Alt[8]", "Alt[7]"
    ), 
    parse = TRUE, 
    size = 13, 
    fontface = "bold"
  ) + 
  labs(x = "Longitude", y = "Latitude") + 
  theme(
    panel.background = element_blank(), 
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.title = element_text(size = 40, face = "bold")
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  rm(horn_grid)
}
```

### Figure 7a

The next map represents the elevation in Sicily (which is stored in the object named `elev`). 

```{r}
tar_load(elev)
```

```{r}
#| include: false
if (!interactive()) {
  elev_mainland <- (elev |> st_downsample(c(5, 5)))[shape_everything_else]
  elev_pantelleria <- elev[shape_pantelleria]
  elev_lampedusa <- elev[shape_lampedusa]
  elev_linosa <- elev[shape_linosa]
}
```

```{r}
#| include: false
if (!interactive()) {
  elev_mainplot <- ggplot() + 
  geom_sf(
    aes(fill = e41005_s10.tif), 
    data = elev_mainland |> st_as_sf(), 
    linewidth = NA
  ) + 
  theme_light() + 
  scale_fill_gradientn(
    breaks = c(0, 500, 1000, 2000, 3000), 
    colours = terrain.colors(100), 
    trans = modulus_trans(p = 0.8)
  ) + 
  theme(
    axis.text = element_text(size = 19.5), 
    legend.text = element_text(size = 19.5),
    legend.key.height = unit(3, "lines"), 
    plot.title = element_text(face = "bold", size = 26, hjust = 0.5)
  ) + 
  labs(fill = "", title = "Altitude (m)")
}
```

```{r}
#| include: false
if (!interactive()) {
  elev_pantelleria_plot <- ggplot() + 
  geom_stars(data = elev_pantelleria |> st_warp(crs = 4326), na.action = na.omit, show.legend = FALSE) +
  coord_sf(crs = 4326) + 
  scale_fill_gradientn(colours = terrain.colors(100), trans = modulus_trans(p = 0.8), limits = c(0, 3000)) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 3), 
    axis.title = element_blank(),
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  elev_lampedusa_plot <- ggplot() + 
  geom_stars(
    data = elev_lampedusa |> 
      st_warp(crs = 4326), 
    na.action = na.omit, 
    show.legend = FALSE
  ) + 
  coord_sf(crs = 4326) + 
  scale_fill_gradientn(colours = terrain.colors(100), trans = modulus_trans(p = 0.7), limits = c(0, 3000)) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 3), 
    axis.title = element_blank(),
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  elev_linosa_plot <- ggplot() + 
  geom_stars(
    data = elev_linosa |> 
      st_warp(crs = 4326), 
    na.action = na.omit, 
    show.legend = FALSE
  ) + 
  coord_sf(crs = 4326) + 
  scale_fill_gradientn(colours = terrain.colors(100), trans = modulus_trans(p = 0.7), limits = c(0, 3000)) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 2), 
    axis.title = element_blank(), 
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r altitude-new}
#| echo: false
#| fig-width: 12
#| fig-height: 10
#| out-width: 70%
#| fig-align: center
if (!interactive()) {
  ggplot() + 
  coord_equal(xlim = c(0, 24), ylim = c(0, 20), expand = FALSE) + 
  annotation_custom(
    ggplotGrob(elev_mainplot), xmin = 0, xmax = 24, ymin = 0, ymax = 20
  ) + 
  annotation_custom(
    ggplotGrob(elev_pantelleria_plot), xmin = 2.5, xmax = 5.5, ymin = 3.15, ymax = 6.15
  ) + 
  annotation_custom(
    ggplotGrob(elev_lampedusa_plot), 
    xmin = 6.25, xmax = 6.25 + 3 * diff(xrange_lampedusa) / diff(xrange_pantelleria), 
    ymin = 3.8, ymax = 3.8 + 3 * diff(yrange_lampedusa) / diff(yrange_pantelleria)
  ) + 
  annotation_custom(
    ggplotGrob(elev_linosa_plot), 
    xmin = 9.5, xmax = 9.5 + 3 * diff(xrange_linosa) / diff(xrange_pantelleria), 
    ymin = 4.2, ymax = 4.2 + 3 * diff(yrange_linosa) / diff(yrange_pantelleria)
  ) + 
  theme(panel.background = element_rect(fill = "white"))
}
```

```{r}
#| include: false
if (!interactive()) {
  rm(elev_lampedusa, elev_linosa, elev_mainland, elev_pantelleria, elev_mainplot, elev_pantelleria_plot, elev_lampedusa_plot, elev_linosa_plot)
}
```

### Figure 7b

Analogously, the next map represents the slope in Sicily

```{r}
tar_load(slope)
```

```{r}
#| include: false
if (!interactive()) {
  slope_mainland <- (slope |> st_downsample(c(5, 5)))[shape_everything_else]
  slope_pantelleria <- slope[shape_pantelleria]
  slope_lampedusa <- slope[shape_lampedusa]
  slope_linosa <- slope[shape_linosa]
}
```

```{r}
#| include: false
if (!interactive()) {
  slope_mainplot <- ggplot() + 
    geom_sf(
      aes(fill = value), 
      data = slope_mainland |> st_as_sf() |> setNames(c("value", "geometry")), 
      linewidth = NA
    ) + 
    theme_light() + 
    scale_fill_gradientn(
      colours = terrain.colors(100), 
      trans = modulus_trans(p = 0.8)
    ) + 
    theme(
      axis.text = element_text(size = 19.5), 
      legend.text = element_text(size = 19.5),
      legend.key.height = unit(3, "lines"), 
      plot.title = element_text(face = "bold", size = 26, hjust = 0.5)
    ) + 
  labs(fill = "", title = "Slope (°)")
}
```

```{r}
#| include: false
if (!interactive()) {
  slope_pantelleria_plot <- ggplot() + 
  geom_stars(data = slope_pantelleria |> st_warp(crs = 4326), na.action = na.omit, show.legend = FALSE) +
  coord_sf(crs = 4326) + 
  scale_fill_gradientn(colours = terrain.colors(100), trans = modulus_trans(p = 0.8), limits = c(0, 80)) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 3), 
    axis.title = element_blank(),
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  slope_lampedusa_plot <- ggplot() + 
  geom_stars(data = slope_lampedusa |> st_warp(crs = 4326), na.action = na.omit, show.legend = FALSE) + 
  coord_sf(crs = 4326) + 
  scale_fill_gradientn(colours = terrain.colors(100), trans = scales::modulus_trans(p = 0.7), limits = c(0, 80)) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 3), 
    axis.title = element_blank(),
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  slope_linosa_plot <- ggplot() + 
  geom_stars(data = slope_linosa |> st_warp(crs = 4326), na.action = na.omit, show.legend = FALSE) + 
  coord_sf(crs = 4326) + 
  scale_fill_gradientn(colours = terrain.colors(100), trans = scales::modulus_trans(p = 0.7), limits = c(0, 80)) + 
  theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "white", linewidth = 2), 
    axis.title = element_blank(), 
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.ticks.length = unit(0, "pt"), 
    plot.margin = margin(0, 0, 0, 0), 
    panel.grid = element_blank()
  )
}
```

```{r slope-new}
#| echo: false
#| fig-width: 12
#| fig-height: 10
#| out-width: 70%
#| fig-align: center
if (!interactive()) {
  ggplot() + 
  coord_equal(xlim = c(0, 24), ylim = c(0, 20), expand = FALSE) + 
  annotation_custom(
    ggplotGrob(slope_mainplot), xmin = 0, xmax = 24, ymin = 0, ymax = 20
  ) + 
  annotation_custom(
    ggplotGrob(slope_pantelleria_plot), xmin = 2.5, xmax = 5.5, ymin = 3.15, ymax = 6.15
  ) + 
  annotation_custom(
    ggplotGrob(slope_lampedusa_plot), 
    xmin = 6.25, xmax = 6.25 + 3 * diff(xrange_lampedusa) / diff(xrange_pantelleria), 
    ymin = 3.8, ymax = 3.8 + 3 * diff(yrange_lampedusa) / diff(yrange_pantelleria)
  ) + 
  annotation_custom(
    ggplotGrob(slope_linosa_plot), 
    xmin = 9.5, xmax = 9.5 + 3 * diff(xrange_linosa) / diff(xrange_pantelleria), 
    ymin = 4.2, ymax = 4.2 + 3 * diff(yrange_linosa) / diff(yrange_pantelleria)
  ) + 
  theme(panel.background = element_rect(fill = "white"))
}
```

```{r}
#| include: false
if (!interactive()) {
  rm(slope_mainplot, slope_mainland, slope_pantelleria, slope_pantelleria_plot, slope_linosa, slope_linosa_plot, slope_lampedusa, slope_lampedusa_plot)
}
```

### Figure 8

We now represent the monthly spatio-temporal distribution of NDVI in Sicily mainland

```{r}
tar_load(NDVI_tidy)
tar_load(NDVI_tidy_agg_1month)
NDVI_tidy_agg_1month <- NDVI_tidy_agg_1month[mainland]
```

```{r NDVI-space-time}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 12
#| fig-height: 10
if (!interactive()) {
  ggplot() + 
  geom_stars(data = NDVI_tidy_agg_1month, downsample = c(1, 1, 0)) + 
  facet_wrap(~time) + 
  scale_fill_gradient2(
    low = "#8d5e0b", 
    mid = "#e6e91a", 
    high = "#045b00", 
    midpoint = 0.5, 
    limits = c(-0.08, 0.92), 
    na.value = "lightblue"
  ) + 
  theme_light() + 
  theme(
    axis.text = element_blank(), 
    axis.ticks = element_blank(), 
    axis.title = element_blank(), 
    panel.grid = element_blank(), 
    panel.background = element_rect(fill = "lightblue"), 
    strip.text = element_text(face = "bold", size = 13), 
    legend.title = element_text(size = 13), 
    legend.text = element_text(size = 10)
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  rm(NDVI_tidy_agg_1month)
}
```

### Figure 9

Relationship between NDVI and land use

```{r}
tar_load(NDVI_and_landuse)
```

```{r NDVI-and-landuse}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 8
#| fig-height: 5
if (!interactive()) {
  NDVI_and_landuse |> 
  st_as_sf() |> 
  mutate(idx = c("Artificial surfaces", "Agricultural areas", "Forests", "Water bodies")) |> 
    st_drop_geometry() |> 
  pivot_longer(!idx, names_to = "date", names_transform = list(
    date = as.Date
  )) |> 
  ggplot() + 
  geom_line(aes(x = date, y = value, col = idx, linetype = idx), linewidth = 1.3) + 
  theme_light() + 
  labs(x = "", y = "Average NDVI", linetype = "", col = "")
}
```

```{r}
#| include: false
rm(NDVI_and_landuse)
```

### Figure 10

Next we replicate the space-time representation of the environmental variables, namely Surface Pressure 

```{r}
#| include: false
tar_load(env_var)
```

```{r}
#| include: false
# 1. Simplify the structure of the environmental variable taking a spatial subset and a daily average (the original data have hourly frequency). 
if (!interactive()) {
  env_var <- env_var[mainland]; gc()
  env_var <- aggregate(env_var, max, by = "1 day"); gc()
}
```

```{r}
#| include: false
# 2a. Subset the surface pressure data and build the palette
if (!interactive()) {
  sp_2months <- aggregate(
    env_var["sp", ], 
    mean, 
    by = "2 months", 
    na.rm = TRUE
  )
  sp_palette <- col_numeric(
    viridis::turbo(15), 
    domain = sp_2months$sp |> as.vector() |> range(na.rm = TRUE)
  )
}
```

```{r}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 10.5
#| fig-height: 7.5
# 3a. Build the plot
if (!interactive()) {
  grid.newpage()
  vp1 <- viewport(
    x = unit(0.35, "npc"),
    y = unit(0.35, "npc"),
    width = unit(0.8, "npc"),
    height = unit(0.8, "npc")
  )
  vp2 <- viewport(
    x = unit(0.9, "npc"),
    y = unit(0.35, "npc"),
    width = unit(0.25, "npc"),
    height = unit(0.6, "npc")
  )
  pushViewport(vp1)
  w <- 0.74
  h <- 0.175

  for (time_period in 1:6) {
    (sp_2months[, time_period, drop = TRUE]) |>
      st_as_sf() -> sp_2months_sf
    poly_cols <- sp_palette(sp_2months_sf$sp)
    poly_coords <- sp_2months_sf |>
      st_geometry() |>
      st_coordinates()
    poly_coords[, 1] <- normalize(poly_coords[, 1])
    poly_coords[, 2] <- normalize(poly_coords[, 2])
    xy_trans <- tf(poly_coords[, 1], poly_coords[, 2], w = w, h = h)
    for (i in unique(poly_coords[, 4])) {
      idx <- which(poly_coords[, 4] == i)
      grid.polygon(
        x = xy_trans$x[idx] + 0.075,
        y = xy_trans$y[idx] + 0.1 + (time_period - 1) * 0.9 / 12,
        gp = gpar(fill = poly_cols[i], col = NA, alpha = 1)
      )
    }

    sicily <- sp_2months_sf |>
      st_union() |>
      st_geometry()
    sicily_coords <- sicily |> st_coordinates()
    sicily_coords[, 1] <- normalize(sicily_coords[, 1])
    sicily_coords[, 2] <- normalize(sicily_coords[, 2])
    xy_trans <- tf(sicily_coords[, 1], sicily_coords[, 2], w = w, h = h)
    grid.polygon(
      x = xy_trans$x + 0.075,
      y = xy_trans$y + 0.1 + (time_period - 1) * 0.9 / 12,
      gp = gpar(fill = NA, col = "black", lwd = 2)
    )
  }
  grid.text(
    "Jan-Feb",
    x = unit(0.15, "npc"),
    y = unit(0.19, "npc"),
    gp = gpar(fontsize = 13, fontface = "bold")
  )
  grid.text(
    "Nov-Dec",
    x = unit(0.15, "npc"),
    y = unit(0.59, "npc"),
    gp = gpar(fontsize = 13, fontface = "bold")
  )
  grid.text(
    "Surface Pressure (Pa)",
    x = unit(0.65, "npc"),
    y = unit(0.7, "npc"),
    gp = gpar(fontsize = 20, fontface = "bold")
  )
  grid.segments(
    x0 = unit(0.15, "npc"),
    x1 = unit(0.15, "npc"),
    y0 = unit(0.21, "npc"),
    y1 = unit(0.565, "npc"),
    gp = gpar(lwd = 2),
    arrow = arrow()
  )
  popViewport()
  pushViewport(vp2)
  labels <- seq(88099, 102800, length.out = 5) |> pretty()
  grid.points(
    x = unit(rep(0.3, 5), "npc"),
    y = unit(seq(0.2, 0.6, length.out = 5), "npc"),
    pch = 21,
    size = unit(1.5, "char"),
    gp = gpar(fill = sp_palette(seq(89000, 102000, length.out = 5)))
  )
  grid.text(
    label = labels,
    x = unit(rep(0.55, 5), "npc"),
    y = unit(seq(0.2, 0.6, length.out = 5), "npc"),
    gp = gpar(fontsize = 15, fontface = "bold")
  )
}
```

and Skin Temperature

```{r}
#| include: false
# 2a. Subset the surface pressure data and build the palette
if (!interactive()) {
  stl2_2months <- aggregate(
    env_var["stl2", ],
    mean,
    by = "2 months",
    na.rm = TRUE
  )
  stl2_2months$stl2 <- stl2_2months$stl2 - 273.15

  stl2_palette <- col_numeric(
    viridis::turbo(15),
    domain = stl2_2months$stl2 |> as.vector() |> range(na.rm = TRUE)
  )
}
```

```{r}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 10.5
#| fig-height: 7.5
if (!interactive()) {
  grid.newpage()
  vp1 <- viewport(
    x = unit(0.35, "npc"),
    y = unit(0.35, "npc"),
    width = unit(0.8, "npc"),
    height = unit(0.8, "npc")
  )
  vp2 <- viewport(
    x = unit(0.9, "npc"),
    y = unit(0.35, "npc"),
    width = unit(0.25, "npc"),
    height = unit(0.6, "npc")
  )
  pushViewport(vp1)
  w <- 0.74
  h <- 0.175
  for (time_period in 1:6) {
    (stl2_2months[, time_period, drop = TRUE]) |>
      st_as_sf() -> stl2_2months_sf
    poly_cols <- stl2_palette(stl2_2months_sf$stl2)
    poly_coords <- stl2_2months_sf |>
      st_geometry() |>
      st_coordinates()
    poly_coords[, 1] <- normalize(poly_coords[, 1])
    poly_coords[, 2] <- normalize(poly_coords[, 2])
    xy_trans <- tf(poly_coords[, 1], poly_coords[, 2], w = w, h = h)
    for (i in unique(poly_coords[, 4])) {
      idx <- which(poly_coords[, 4] == i)
      grid.polygon(
        x = xy_trans$x[idx] + 0.075,
        y = xy_trans$y[idx] + 0.1 + (time_period - 1) * 0.9 / 12,
        gp = gpar(fill = poly_cols[i], col = NA, alpha = 1)
      )
    }

    sicily <- stl2_2months_sf |>
      st_union() |>
      st_geometry()
    sicily_coords <- sicily |> st_coordinates()
    sicily_coords[, 1] <- normalize(sicily_coords[, 1])
    sicily_coords[, 2] <- normalize(sicily_coords[, 2])
    xy_trans <- tf(sicily_coords[, 1], sicily_coords[, 2], w = w, h = h)
    grid.polygon(
      x = xy_trans$x + 0.075,
      y = xy_trans$y + 0.1 + (time_period - 1) * 0.9 / 12,
      gp = gpar(fill = NA, col = "black", lwd = 2)
    )
  }
  grid.text(
    "Jan-Feb",
    x = unit(0.15, "npc"),
    y = unit(0.19, "npc"),
    gp = gpar(fontsize = 13, fontface = "bold")
  )
  grid.text(
    "Nov-Dec",
    x = unit(0.15, "npc"),
    y = unit(0.59, "npc"),
    gp = gpar(fontsize = 13, fontface = "bold")
  )
  grid.text(
    "Skin Temperature (Celsius)",
    x = unit(0.65, "npc"),
    y = unit(0.7, "npc"),
    gp = gpar(fontsize = 20, fontface = "bold")
  )
  grid.segments(
    x0 = unit(0.15, "npc"),
    x1 = unit(0.15, "npc"),
    y0 = unit(0.21, "npc"),
    y1 = unit(0.565, "npc"),
    gp = gpar(lwd = 2),
    arrow = arrow()
  )
  popViewport()
  pushViewport(vp2)
  labels <- seq(5, 35, length.out = 5) |> pretty()
  grid.points(
    x = unit(rep(0.3, 7), "npc"),
    y = unit(seq(0.1, 0.6, length.out = 7), "npc"),
    pch = 21,
    size = unit(1.5, "char"),
    gp = gpar(fill = stl2_palette(seq(6.5, 33, length.out = 7)))
  )
  grid.text(
    label = labels,
    x = unit(rep(0.5, 7), "npc"),
    y = unit(seq(0.1, 0.6, length.out = 7), "npc"),
    gp = gpar(fontsize = 18, fontface = "bold")
  )
}
```

```{r}
#| include: false
rm(env_var)
if (!interactive()) {
  rm(h, i, idx, labels, poly_cols, poly_coords, sicily, sicily_coords, sp_2months, sp_2months_sf, sp_palette, stl2_2months_sf, stl2_2months, stl2_palette, time_period, vp1, vp2, w, xy_trans)
}
```

## Section 4

### Figure 11

Now we replicate the plots regarding the temporal distribution of some environmental variables

```{r}
tar_load(cov_time)

# Kelvin to Celsius
cov_time$d2m <- cov_time$d2m - 273.15
cov_time$t2m <- cov_time$t2m - 273.15
cov_time$skt <- cov_time$skt - 273.15
cov_time$stl1 <- cov_time$stl1 - 273.15
cov_time$stl2 <- cov_time$stl2 - 273.15
cov_time$stl3 <- cov_time$stl3 - 273.15
cov_time$stl4 <- cov_time$stl4 - 273.15
```

```{r wind-speed-time}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 6
#| fig-height: 4
if (!interactive()) {
  plot(
    cov_time$time, cov_time$u10, type = "l", col = 5, 
    xlab = "", ylab = "m/s", main = "Wind Speed", lwd = 2
  )
  lines(cov_time$time, cov_time$v10, col = 6, lwd = 2)
  legend("top", legend = c("u10", "v10"), col = c(5, 6), lty = 1, cex = 0.8, lwd = 2)
}
```

```{r temperatures-time}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 6
#| fig-height: 4
if (!interactive()) {
  plot(
    cov_time$time, cov_time$d2m, type = "l", col = 4, 
    xlab = "", ylab = "Celsius", main = "Temperatures", lwd = 2, 
    ylim = c(2, 60)
  )
  lines(cov_time$time, cov_time$t2m, col = 5, lwd = 2)
  lines(cov_time$time, cov_time$skt, col = 6, lwd = 2)
  lines(cov_time$time, cov_time$stl1, col = 7, lwd = 2)
  lines(cov_time$time, cov_time$stl2, col = 8, lwd = 2)
  lines(cov_time$time, cov_time$stl3, col = 9, lwd = 2)
  lines(cov_time$time, cov_time$stl4, col = 10, lwd = 2)
  legend("topleft", legend=c("d2m", "t2m", "skt", "stl1", "stl2", "stl3", "stl4"),
       col=c(4:10), lty=1, cex=0.8, lwd = 2)
}
```

```{r precipitations-time}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 6
#| fig-height: 4
if (!interactive()) {
  plot(
    cov_time$time, cov_time$tp, type = "l", col = 4, 
    xlab = "", ylab = "m", main = "Precipitations", lwd = 2 
  )
}
```

```{r pressure-time}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 6
#| fig-height: 4
if (!interactive()) {
  plot(
    cov_time$time, cov_time$sp, type = "l", col = 4, 
    xlab = "", ylab = "Pa", main = "Surface Pressure", lwd = 2 
  )
}
```

### Figure 12

Next we focus on the pairs plot

```{r pairs_temperature}
#| echo: false
#| out-width: 70%
#| fig-align: center
#| fig-width: 12
#| fig-height: 12
panel.hist <- function(x, ...)
{
  usr <- par("usr")
  par(usr = c(usr[1:2], 0, 1.5) )
  h <- hist(x, plot = FALSE)
  breaks <- h$breaks; nB <- length(breaks)
  y <- h$counts; y <- y/max(y)
  rect(breaks[-nB], 0, breaks[-1], y, col = "grey", ...)
}

panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
  par(usr = c(0, 1, 0, 1))
  r <- abs(cor(x, y))
  txt <- format(c(r, 0.123456789), digits = digits)[1]
  txt <- paste0(prefix, txt)
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * r)
}
if (!interactive()) {
  pairs(
    cov_time[,c(2:12)], upper.panel = panel.cor, diag.panel = panel.hist,
    lower.panel = panel.smooth, pch = "."
  )
}
```

```{r}
#| include: false
rm(cov_time, panel.hist, panel.cor)
```

The object `mod_global` contains the estimates for the global model

```{r}
tar_load(mod_global)
summary(mod_global$mod_global)
```

### Figure 13

The parameter estimates for the local model are summarised in the following plot: 

```{r}
tar_load(mod_local)
```

```{r}
#| include: false
plot_covs_3D <- function(
  name,
  bias, 
  main, 
  min = -Inf, 
  max = Inf, 
  val = NA, 
  mod = mod_local 
) {
  id <- if (!is.na(val)) {
    which(mod[["newdata"]][["land"]] == val)
  } else {
    seq_len(nrow(mod[["newdata"]]))
  }
  colvar <- mod[["IntCoefs_local"]][id, ][[name]]
  id <- id[between(colvar, min, max)]
  palette <- rev(colorRampPalette(
    divergingx_hcl(
      n = 11, l3 = 0, palette = "RdBu",
      p3 = 0.8, p4 = 0.6
    ), 
    bias = bias
  )(99))
  
  x <- mod[["X"]][["df"]][["x"]][id]
  y <- mod[["X"]][["df"]][["y"]][id]
  t <- mod[["X"]][["df"]][["t"]][id]
  
  scatter3D(
    x = x, 
    y = y, 
    z = t, 
    theta = 60, 
    phi = 35, 
    col = palette, 
    ticktype = "detailed", 
    colvar = mod[["IntCoefs_local"]][id, name], 
    xlab = "Easting (Km)", 
    ylab = "Northing (Km)", 
    zlab = "Days from 1st January", 
    main = main
  )
}
```

```{r covs-local-all-together}
#| echo: false
#| fig-width: 15
#| fig-height: 15
#| fig-align: center
#| crop: true
#| out-width: 100%
if (!interactive()) {
  par(mfrow = c(3, 3))
  tmp <- mapply(
    FUN = plot_covs_3D,
    name = c(
      "(Intercept)", "as.factor(land)2", "as.factor(land)3", "NDVI", "elev", "slope", "u10", "stl2", "tp"
    ),
    bias = c(4, 0.85, 2.7, 5, 1.3, 0.9, 0.9, 0.2, 2.5),
    main = c(
      "Urban", "Agricultural Areas", "Forests", "NDVI", "Elevation", "Slope", "Wind Speed", "Temperature", "Precipitation"
    ),
    min = c(-55, -1, -Inf, -5, -Inf, -Inf, -0.5, -Inf, -300),
    max = c(-10, 1.25, 1, -3, 1, Inf, Inf, 0.25, 75),
    val = c(1L, 2L, 3L, NA, NA, NA, NA, NA, NA)
  )
}
```

### Figure 14

Global and local estimates of the intensity function: 

```{r global-and-local-intensity}
#| echo: false
#| fig-width: 10.5
#| fig-height: 8.5
#| fig-align: center
#| crop: true
#| out-width: 70%
if (!interactive()) {
  # Intensity global
  mark_int <- na.omit(mod_global$l)
  ppp_gl <- ppp(
    x = mod_global$X$df$x[-attr(mark_int, "na.action")],
    y = mod_global$X$df$y[-attr(mark_int, "na.action")],
    marks = mark_int, 
    window = mainland |> as.owin() |> spatstat.geom::rescale(1000)
  )
  int_global <- Smooth(ppp_gl, sigma = OS(unmark(ppp_gl)))
  
  mark_int_local <- na.omit(mod_local$l_local)
  ppp_l <- ppp(
    x = mod_local$X$df$x[-attr(mark_int_local, "na.action")],
    y = mod_local$X$df$y[-attr(mark_int_local, "na.action")],
    marks = mark_int_local, 
    window = mainland |> as.owin() |> spatstat.geom::rescale(1000)
  )
  int_local <- Smooth(ppp_l, sigma = OS(unmark(ppp_l)))
  int <- solist(int_global, int_local)
  plot(
    int, 
    equal.ribbon = TRUE, 
    main = "", 
    col = attr(spatstat.geom::colourmap(
      grDevices::hcl.colors(100, "Viridis", rev = TRUE),
      range = range(mark_int, mark_int_local)
    ),"stuff")$outputs, 
    main.panel = c("Global", "Local"), 
    panel.end = unmark(ppp_l), 
    panel.end.args = list(cex = 0.75)
  )
}
```

```{r}
#| include: false
if (!interactive()) {
  rm(
    int, int_global, mark_int, mark_int_local, ppp_gl, ppp_l
  )
}
```

### Figure 15

Comparison between the residuals in the global and local model. 

```{r}
#| warning: false
# Focus on the mainland
id1 <- (!(fires_sicily_ppp$x < 1800000 | fires_sicily_ppp$y > 4263000))
# Remove a few points which displayed numerical problems in the estimate
id2 <- (
  mod_local$IntCoefs_local$`tp` > c(-800)
  | mod_local$IntCoefs_local$`stl2` < c(-0.2)
)
# Remove a few points with missing covariates due to numerical inaccuracies in the spatial extraction which implied NA in the estimates of lambda
id3 <- !is.na(mod_local$l_local)
id <- which(id1 & id2 & id3)

mod_local$newdata <- mod_local$newdata[id, ]

subset_ppp <- ppp(
  x = mod_local$newdata$x,
  y = mod_local$newdata$y,
  marks = mod_local$newdata$t,
  window = fires_sicily_ppp$window |> spatstat.geom::rescale(1000)
)
# Spatiotemporal kernel intensity
st_kernel <- spattemp.density(subset_ppp, tres = 128)

# Extract the intensity values. The warnings you might see are simply due to
# numerical rounding problems at the boundary of the time interval.
cc <- spattemp.slice(st_kernel, tt = mod_local$newdata$t)$z

cc_dens = mapply(
  FUN = function(x, y, cc) {
    cc[list(x = x, y = y)]
  }, 
  x = mod_local$newdata$x, 
  y = mod_local$newdata$y, 
  cc = cc
)

# We need to remove such points at the boundary of the time interval
id_no <- vapply(cc_dens, identical, logical(1), y = numeric(0)) |> which()
nX <- length(unlist(cc_dens))
```

```{r residui-no-pt-neri-proposta2}
#| echo: false
#| fig-width: 10
#| warning: false
#| crop: true
#| fig-align: center
#| out-width: 80%
dt <- data.frame(
  pred = c(
    mod_local$l[id][-id_no], mod_local$l_local[id][-id_no]
  ), 
  smo = c(unlist(cc_dens) * nX, unlist(cc_dens) * nX), 
  type = rep(c("Global", "Local"), each = length(unlist(cc_dens)))
)
if (!interactive()) {
  ggplot(dt, aes(x = pred, y = smo)) + 
  geom_point() + 
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", linewidth = 1, col = 2) + 
  facet_wrap(~type, scales = "free") + 
  scale_x_continuous(transform = "log10") + 
  scale_y_continuous(transform = "log10") + 
  theme_light() + 
  theme(
    strip.text = element_text(size = 11, colour = "black", face = "bold"), 
    axis.text = element_text(size = 8.5), 
    axis.title = element_text(size = 11.5)
  ) + 
  labs(x = "Parametric intensity", y = "Kernel intensity")
}
```

### Figure 16

Density distribution of the residuals

```{r}
residui_global <- unlist(cc_dens) * nX - mod_local$l[id][-id_no]
residui_local <- unlist(cc_dens) * nX - mod_local$l_local[id][-id_no]

residui <- data.frame(
  residuals = c(residui_global, residui_local),
  model = rep(c("Global", "Local"), each = length(residui_local))
)
```

```{r density-residuals}
#| echo: false
#| fig-width: 10
#| fig-height: 7
#| crop: true
#| fig-align: center
#| out-width: 80%
if (!interactive()) {
  ggplot(data=residui, aes(x=residuals, group=model, fill=model)) + 
    geom_density(adjust=1.5, alpha=.4) + 
    theme_minimal() +
    theme(
      axis.text = element_text(size = 10)
    ) + 
    labs(x = "Residual", y = "Density", fill = "Model Type")
}
```

### Figure 17

Spatio-temporal residuals of the local model: 

```{r residui-local-3D}
#| echo: false
#| crop: true
#| fig-align: center
#| out-width: 80%
#| fig-width: 10
#| fig-height: 10
color_palette_on_zero <- rev(colorRampPalette(divergingx_hcl(
  n = 11, l3 = 0,
  palette = "RdBu",
  p3 = 0.8, p4 = 0.6
), bias = 1.5)(99))
if (!interactive()) {
  scatter3D(
    x = mod_local$newdata$x[-id_no],
    y = mod_local$newdata$y[-id_no],
    z = mod_local$newdata$t[-id_no],
    col = color_palette_on_zero,
    theta = 60, phi = 35,
    colvar = residui_local, 
    ticktype = "detailed", 
    xlab = "Northing (Km)", ylab = "Easting (Km)", zlab = "Days from January 1st"
  )
}
```
